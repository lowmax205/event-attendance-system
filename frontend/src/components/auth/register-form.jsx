import { useAuth } from '@contexts/auth-context';
import { Mail, User, CheckCircle } from 'lucide-react';
import React, { useState } from 'react';
import { FieldWithIcon, PasswordField } from './shared-components';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';
import apiService from '@/services/api-service';

export function RegisterForm({ onSuccess, setTab }) {
  const { login } = useAuth();
  const [registerForm, setRegisterForm] = useState({
    first_name: '',
    last_name: '',
    middle_name: '',
    username: '',
    email: '',
    password: '',
    confirm: '',
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Normalize a suggested username (letters, numbers, underscore, dot, hyphen)
  const normalizeUsername = (name) => {
    if (!name) return '';
    const trimmed = String(name).trim();
    const cleaned = trimmed
      .toLowerCase()
      .replace(/[^a-z0-9._-]/g, '_')
      .replace(/_+/g, '_')
      .replace(/^_+|_+$/g, '');
    // Keep it reasonably short (Django default max is 150)
    return cleaned.slice(0, 40) || 'user';
  };

  // Derive a base username from user input or email local part
  const deriveBaseUsername = (typedUsername, email) => {
    if (typedUsername && typedUsername.trim()) return normalizeUsername(typedUsername);
    const local = (email || '').split('@')[0] || 'user';
    return normalizeUsername(local);
  };

  // Make a unique-ish username by appending short random suffix
  const withSuffix = (base) => `${base}_${Math.random().toString(36).slice(2, 6)}`;

  // Format backend validation details into a readable string
  const formatDetails = (details) => {
    if (!details || typeof details !== 'object') return '';
    try {
      const parts = Object.entries(details).map(([field, msgs]) => {
        const list = Array.isArray(msgs) ? msgs.join(', ') : String(msgs);
        return `${field}: ${list}`;
      });
      return parts.join(' \n');
    } catch {
      return JSON.stringify(details);
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    if (registerForm.password !== registerForm.confirm) {
      setError('Passwords do not match');
      return;
    }
    setLoading(true);
    setError('');
    setSuccess('');

    try {
      // Prepare payload matching backend expectations
      const baseUsername = deriveBaseUsername(registerForm.username, registerForm.email);
      const autoGenerated = !registerForm.username?.trim();
      let payload = {
        username: baseUsername,
        email: registerForm.email,
        password: registerForm.password,
        password_confirm: registerForm.confirm,
        first_name: registerForm.first_name,
        middle_name: registerForm.middle_name,
        last_name: registerForm.last_name,
        role: 'student',
      };

      let res;
      try {
        res = await apiService.register(payload);
      } catch (err) {
        // If username already exists and we auto-generated it, retry once with a suffix
        const details = err?.response?.data?.details;
        const usernameErrors = details?.username;
        const usernameTaken = Array.isArray(usernameErrors)
          ? usernameErrors.some((m) => /exists|taken/i.test(String(m)))
          : /exists|taken/i.test(String(usernameErrors || ''));

        if (autoGenerated && usernameTaken) {
          payload = { ...payload, username: withSuffix(baseUsername) };
          res = await apiService.register(payload);
        } else {
          throw err;
        }
      }

      // Handle envelope: success + data
      const ok = res?.success !== false; // treat missing as true

      if (!ok) {
        const details = res?.details || res?.error || 'Registration failed';
        const message = typeof details === 'object' ? formatDetails(details) : String(details);
        const ex = new Error(message);
        ex.response = { data: res };
        throw ex;
      }

      // Option A: auto-login, then redirect to profile to complete info with return path
      try {
        const loginResult = await login({
          email: registerForm.email,
          password: registerForm.password,
        });
        if (loginResult?.success) {
          setSuccess('Account created! Redirecting to profile...');
          // Compute return path to resume flow (e.g., attendance verification URL)
          const current = `${window.location.pathname}${window.location.search || ''}`;
          const redirectParam = encodeURIComponent(current);
          // Navigate to profile with redirect back to current page
          setTimeout(() => {
            onSuccess?.();
            window.location.href = `/profile?redirect=${redirectParam}`;
          }, 800);
        } else {
          // Fallback: go to login tab prefilled
          setSuccess('Account created! Please sign in.');
          setTimeout(() => setTab('login'), 800);
        }
      } catch {
        setSuccess('Account created! Please sign in.');
        setTimeout(() => setTab('login'), 800);
      }
    } catch (err) {
      // Surface backend validation errors nicely
      const details = err?.response?.data?.details;
      const baseMsg = err?.response?.data?.error || err?.message || 'Registration failed';
      const detailMsg = details ? `\n${formatDetails(details)}` : '';
      setError(`${baseMsg}${detailMsg}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleRegister} className='space-y-6'>
      <div className='grid gap-4 md:grid-cols-2'>
        <FieldWithIcon
          id='reg-first-name'
          label='First Name'
          icon={User}
          value={registerForm.first_name}
          onChange={(v) => setRegisterForm((f) => ({ ...f, first_name: v }))}
        />
        <FieldWithIcon
          id='reg-last-name'
          label='Last Name'
          icon={User}
          value={registerForm.last_name}
          onChange={(v) => setRegisterForm((f) => ({ ...f, last_name: v }))}
        />
      </div>
      <div className='grid gap-4 md:grid-cols-2'>
        <FieldWithIcon
          id='reg-middle-name'
          label='Middle Name (optional)'
          icon={User}
          value={registerForm.middle_name}
          onChange={(v) => setRegisterForm((f) => ({ ...f, middle_name: v }))}
        />
        <FieldWithIcon
          id='reg-username'
          label='Username (optional)'
          icon={User}
          value={registerForm.username}
          onChange={(v) => setRegisterForm((f) => ({ ...f, username: v }))}
        />
      </div>
      <FieldWithIcon
        id='reg-email'
        label='Email'
        type='email'
        icon={Mail}
        value={registerForm.email}
        onChange={(v) => setRegisterForm((f) => ({ ...f, email: v }))}
      />
      <div className='grid gap-4 md:grid-cols-2'>
        <PasswordField
          id='reg-password'
          label='Password'
          value={registerForm.password}
          onChange={(v) => setRegisterForm((f) => ({ ...f, password: v }))}
        />
        <PasswordField
          id='reg-confirm'
          label='Confirm Password'
          value={registerForm.confirm}
          onChange={(v) => setRegisterForm((f) => ({ ...f, confirm: v }))}
        />
      </div>
      {error && (
        <Alert variant='destructive'>
          <AlertTitle>Registration failed</AlertTitle>
          <AlertDescription className='break-words'>
            {typeof error === 'string' ? error : JSON.stringify(error)}
          </AlertDescription>
        </Alert>
      )}
      {success && (
        <Alert variant='success'>
          <CheckCircle className='h-4 w-4' />
          <AlertTitle>Success</AlertTitle>
          <AlertDescription>{success}</AlertDescription>
        </Alert>
      )}
      <Button type='submit' disabled={loading} className='button-gradient-bg w-full'>
        {loading ? 'Creating...' : 'Register'}
      </Button>
      <p className='text-muted-foreground mt-4 text-center text-xs'>
        Already have an account?{' '}
        <button
          type='button'
          onClick={() => setTab('login')}
          className='text-primary hover:underline'
        >
          Sign in
        </button>
      </p>
    </form>
  );
}

export default RegisterForm;
